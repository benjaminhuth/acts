name: Builds


on:
  pull_request:
    branches:
      - main
      - 'release/**'
      - 'develop/**'
    paths-ignore:
      - "docs/**"
    types:
      - opened
      - reopened
      - synchronize 
      - unlabeled

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_MAXSIZE: 500M
  CCACHE_KEY_SUFFIX: r1
  LEFT: "${{ (github.event.action != 'unlabeled') }}"
  RIGHT: "${{ (github.event.action == 'unlabeled' && github.event.label == ':construction: WIP') }}"

#lassdasdfakjhlkhlhlkhlkhlkhlkhlkjhlk
# if: (github.event.action != 'unlabled' && !contains(github.event.pull_request.labels.*.name, ':construction: WIP')) || (github.event.action == 'unlabled' && github.event.label == ':construction: WIP')

jobs:
  #dump_contexts_to_log:
    #runs-on: ubuntu-latest
    #steps:
      #- name: Dump GitHub context
        #id: github_context_step
        #run: echo '${{ toJSON(github) }}'
  lcg:
    if: "${{ (github.event.action != 'unlabeled' && !contains(github.event.pull_request.labels.*.name, ':construction: WIP')) || (github.event.action == 'unlabeled' && github.event.label == ':construction: WIP') }}"
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/${{ matrix.image }}:v29
    strategy:
      matrix:
        image:
          - centos7-lcg100-gcc10
          - centos7-lcg101-gcc11
          - centos8-lcg100-gcc10
          - centos8-lcg101-gcc11
    env:
      SETUP: source /opt/lcg_view/setup.sh
      INSTALL_DIR: ${{ github.workspace }}/install
      ACTS_LOG_FAILURE_THRESHOLD: WARNING
    steps:
      - uses: actions/checkout@v3

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/ccache
          key: ${{ runner.os  }}-ccache-${{ matrix.image }}_${{ env.CCACHE_KEY_SUFFIX }}_${{ github.sha }}
          restore-keys: |
            ${{ runner.os  }}-ccache-${{ matrix.image }}_${{ env.CCACHE_KEY_SUFFIX }}_

      - name: Configure
        # setting CMAKE_CXX_STANDARD=17 is a workaround for a bug in the
        # dd4hep CMake configuration that gets triggered on recent CMake
        # versions 
        run: >
          ${SETUP} &&
          cmake -B build -S .
          -GNinja
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"
          -DACTS_LOG_FAILURE_THRESHOLD=WARNING
          -DACTS_BUILD_EXAMPLES_PYTHON_BINDINGS=ON
          -DACTS_FORCE_ASSERTIONS=ON
          -DACTS_BUILD_EXAMPLES=ON
          -DACTS_BUILD_PLUGIN_DD4HEP=OFF
          -DACTS_BUILD_PLUGIN_TGEO=ON
          -DACTS_BUILD_PLUGIN_IDENTIFICATION=ON
          -DACTS_BUILD_PLUGIN_JSON=ON
          -DACTS_BUILD_FATRAS=ON
          -DACTS_BUILD_PLUGIN_LEGACY=ON
          -DACTS_BUILD_PLUGIN_AUTODIFF=ON
          -DACTS_BUILD_BENCHMARKS=ON
          -DACTS_BUILD_UNITTESTS=ON
          -DACTS_BUILD_INTEGRATIONTESTS=ON
          -DACTS_BUILD_EXAMPLES_DD4HEP=OFF
          -DACTS_BUILD_PLUGIN_EDM4HEP=OFF
          -DACTS_BUILD_EXAMPLES_GEANT4=ON
          -DACTS_BUILD_EXAMPLES_HEPMC3=ON
          -DACTS_BUILD_EXAMPLES_PYTHIA8=ON
          -DACTS_BUILD_FATRAS_GEANT4=ON
          -DACTS_BUILD_FATRAS=ON
          -DACTS_BUILD_ALIGNMENT=ON
          -DACTS_BUILD_ANALYSIS_APPS=ON

      - name: Build
        run: ${SETUP} && cmake --build build

      - name: Unit tests
        run: ${SETUP} && cmake --build build --target test

      - name: Integration tests
        run: ${SETUP} && cmake --build build --target integrationtests

      - name: Install
        run: ${SETUP} && cmake --build build --target install

      - uses: actions/upload-artifact@v3
        with:
          name: acts-${{ matrix.image }}
          path: ${{ env.INSTALL_DIR }}

      - name: Downstream configure
        run: >
          ${SETUP} &&
          cmake -B build-downstream -S Tests/DownstreamProject
          -GNinja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_PREFIX_PATH="${INSTALL_DIR}"
          -DDD4HEP=OFF

      - name: Downstream build
        run: ${SETUP} && cmake --build build-downstream

      - name: Downstream run
        run: ${SETUP} && ./build-downstream/bin/ShowActsVersion

  linux_ubuntu:
    if: "${{ (github.event.action != 'unlabeled') || (github.event.action == 'unlabeled' && github.event.label == ':construction: WIP') }}"
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004:v29
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      ACTS_LOG_FAILURE_THRESHOLD: WARNING
    steps:
      - name: Install git lfs
        run: apt-get install -y git-lfs

      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: true

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/ccache
          key: ${{ runner.os  }}-ccache-linux_ubuntu_${{ env.CCACHE_KEY_SUFFIX }}_${{ github.sha }}
          restore-keys: |
            ${{ runner.os  }}-ccache-linux_ubuntu_${{ env.CCACHE_KEY_SUFFIX }}_

      - name: Configure
        # setting CMAKE_CXX_STANDARD=17 is a workaround for a bug in the
        # dd4hep CMake configuration that gets triggered on recent CMake
        # versions 
        run: >
          cmake -B build -S .
          -GNinja
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"
          -DACTS_ENABLE_LOG_FAILURE_THRESHOLD=ON 
          -DACTS_BUILD_EVERYTHING=ON
          -DACTS_BUILD_ODD=ON
          -DACTS_BUILD_EXAMPLES_PYTHON_BINDINGS=ON
          -DACTS_BUILD_EXAMPLES_EDM4HEP=ON
          -DACTS_FORCE_ASSERTIONS=ON
          -DACTS_BUILD_ANALYSIS_APPS=ON

      - name: Build
        run: cmake --build build

      - name: Unit tests
        run: cmake --build build --target test

      - name: Integration tests
        run: cmake --build build --target integrationtests

      - name: Install
        run: cmake --build build --target install

      - name: Package build
        run: tar czf build.tar.gz -C build . 

      - uses: actions/upload-artifact@v3
        with:
          name: acts-linux-ubuntu
          path: build.tar.gz

      - name: Downstream configure
        run: >
          cmake -B build-downstream -S Tests/DownstreamProject
          -GNinja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_FLAGS=-Werror
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_PREFIX_PATH="${INSTALL_DIR}"

      - name: Downstream build
        run: cmake --build build-downstream

      - name: Downstream run
        run: ./build-downstream/bin/ShowActsVersion

  linux_examples_test:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004:v29
    needs: [linux_ubuntu]
    steps:
      - name: Install git lfs
        run: apt-get install -y git-lfs

      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: true

      - uses: actions/download-artifact@v3
        with:
          name: acts-linux-ubuntu

      - name: Unpack build
        run: mkdir build && tar xf build.tar.gz -C build

      - name: Examples
        shell: bash
        run: >
          export LD_LIBRARY_PATH=$PWD/build/thirdparty/OpenDataDetector/factory:$LD_LIBRARY_PATH
          && source /usr/local/bin/thisdd4hep_only.sh
          && ./CI/run_examples.sh

      - name: Python level tests
        shell: bash
        run: >
          /usr/local/bin/download_geant4_data.sh
          && source /usr/local/bin/thisroot.sh
          && source /usr/local/bin/thisdd4hep_only.sh
          && source /usr/local/bin/geant4.sh
          && source build/python/setup.sh
          && export LD_LIBRARY_PATH=$PWD/build/thirdparty/OpenDataDetector/factory:$LD_LIBRARY_PATH
          && pip3 install -r Examples/Python/tests/requirements.txt
          && pytest -rFsv

  linux_physmon:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004:v29
    needs: [linux_ubuntu]

    steps:
      - name: Install git lfs
        run: apt-get install -y git-lfs

      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: true

      - uses: actions/download-artifact@v3
        with:
          name: acts-linux-ubuntu

      - name: Unpack build
        run: mkdir build && tar xf build.tar.gz -C build

      - name: Physics performance checks
        shell: bash
        run: >
          echo "::group::Dependencies"
          && git config --global safe.directory "$GITHUB_WORKSPACE"
          && pip3 install histcmp==0.4.4
          && /usr/local/bin/download_geant4_data.sh
          && source /usr/local/bin/thisroot.sh
          && source /usr/local/bin/thisdd4hep_only.sh
          && source /usr/local/bin/geant4.sh
          && source build/python/setup.sh
          && export LD_LIBRARY_PATH=$PWD/build/thirdparty/OpenDataDetector/factory:$LD_LIBRARY_PATH
          && echo "::endgroup::"
          && export PYTHONPATH="${PYTHONPATH}":"${GITHUB_WORKSPACE}/Examples/Scripts/Python"
          && CI/physmon/phys_perf_mon.sh physmon

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: physmon
          path: physmon

